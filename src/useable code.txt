let params = req.body || {} && req.params || {} && req.query || {};
			const body = Object.assign({}, params);





              const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];


			
							// Html email body
							/* let html = "<p>Please Confirm your Account.</p><p>OTP: "+otp+"</p>";
							// Send confirmation email
							mailer.send(
								constants.confirmEmails.from, 
								req.body.email,
								"Confirm Account",
								html
							).then(function(){
								user.isConfirmed = 0;
								user.confirmOTP = otp;
								// Save user.
								user.save(function (err) {
									if (err) { return apiResponse.ErrorResponse(res, err); }
									return apiResponse.successResponse(res,"Confirm otp sent.");
								});
							}); */














	// Html email body
					//let html = "<p>Please Confirm your Account.</p><p>OTP: "+otp+"</p>";
					// Send confirmation email
					/* mailer.send(
						constants.confirmEmails.from, 
						params.email,
						"Confirm Account",
						html
					).then(function(){
						// Save user.
						user.save(function (err) {
							if (err) { return apiResponse.ErrorResponse(res, err); }
							let userData = {
								_id: user._id,
								firstName: user.firstName,
								lastName: user.lastName,
								email: user.email
							};
							return apiResponse.successResponseWithData(res,"Registration Success.", userData);
						});
					}).catch(err => {
						console.log(err);
						return apiResponse.ErrorResponse(res,err);
					}) ; */



    <%- layout('layout/sidebar') %>

<%- include('./header'); %>
<%- include('./footer'); %>

app.get('/', function(req, res) {
  res.send('Hello World!');
  return;
});

login erro 
<!DOCTYPE html>
<html>
<head>
  <title>Login</title>
</head>
<body>
  <% if (message) { %>
    <div><%= message %></div>
  <% } %>
  <form method="POST" action="/login">
    <input type="text" name



    























    app.get('/', (req, res) => {
  if (someCondition) {
    res.send('Response 1');
    return; // Add this line to prevent further execution
  }
  res.send('Response 2');
});







 let varifyToken = (req, res, next) => {
        const { user } = req;


        const payload = { userId: 123 };
        const secretKey = 'secret-key';
        const token = jwt.sign(payload, secretKey);
        console.log('token==>>',token)
        /* verify */
        const authHeader = req.headers['authorization'];
        const vtoken = authHeader && authHeader.split(' ')[1];
      
        // If the token is not provided, return an error response
        if (!vtoken) {
          return res.status(401).json({ error: 'JWT token not provided' });
        }
      
        // Verify the token using the secret key
        jwt.verify(vtoken, 'secret-key', (err, decoded) => {
          // If the token is not valid, return an error response
          if (err) {
            return res.status(403).json({ error: 'JWT token invalid' });
          }
          console.log('token decoded==>>',decoded)
          // If the token is valid, attach the decoded payload to the request object and call the next middleware function
          req.user = decoded;
          next();
        });

        
        /* jwt auth */
        /* const authHeader = req.headers['authorization'];
        const token = authHeader && authHeader.split(' ')[1]; 
        console.log("header==>>", token)
        jwt.verify(token, "helloSecrete", (err, decoded) => {

            console.log('jwt err==>', err);
            console.log('jwt decoded==>', decoded);

            if (err) {
              res.redirect('auth/login'); 
              return res.status(401).send({
                message: "Unauthorized!"
              });
            }
            req.userId = decoded.id;
            next();
          }); */
        /* eof */
        console.log('req.u2311====', req.session.user)
        //res.send('Response 1');
        if(req.session){
            console.log("111111111111")
            let LoginUser = req.session.user; 
            if(LoginUser != undefined){
                let user = req.session.user;    
                console.log("222222222222")
                //next(user); 
                res.redirect('/dashboard');   
            }else{
                console.log("333333333333")
                res.redirect('/login');       
            } 
        }else{
            res.redirect('/login');       
        }
    }







------------------------------index ejs

<%- include('./profile'); %>

<!--   
<div class="row">
    <div class="col-lg-2">
        <%- include('./profile'); %>
    </div>
    <div class="col-lg-10">
        <div id="body" class="active py-4">
            <!-- navbar navigation component -->
            
            <!-- flash if user login -->
            <% if (user) { %>
              <div class="alert alert-success" role="alert">
                  <%= user.email %>
              </div>
            <% } %>
            <!-- eof flash -->
          
            <!-- end of navbar navigation -->
           
          </div>
    </div>

</div> -->




















-----------------alert screen

<div class="alert alert-primary" role="alert">
                A simple primary alert—check it out!
              </div>
              <div class="alert alert-success" role="alert">
                A simple success alert—check it out!
              </div>
              <div class="alert alert-danger" role="alert">
                A simple danger alert—check it out!
              </div>















<%- include('./layout/footer.ejs'); %>

</body>
</html>
<script>
  $(document).ready(function(){
     $('.dropdown-toggle').dropdown()
 });
</script>







----------------------------------------------------google fb auth---------------------------------------

app.get('/auth/google', (req, res) => {
  const { clientID, redirectURI } = config.google;
  const authURL = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${clientID}&redirect_uri=${redirectURI}&response_type=code&scope=profile%20email`;
  res.redirect(authURL);
});

app.get('/auth/google/callback', async (req, res) => {
  const { clientID, clientSecret, redirectURI } = config.google;
  const { code } = req.query;

  try {
    const tokenResponse = await axios.post('https://oauth2.googleapis.com/token', {
      code,
      client_id: clientID,
      client_secret: clientSecret,
      redirect_uri: redirectURI,
      grant_type: 'authorization_code'
    });

    const { access_token } = tokenResponse.data;

    const profileResponse = await axios.get(`https://www.googleapis.com/oauth2/v1/userinfo?access_token=${access_token}`);
    const profile = profileResponse.data;

    // Handle user data after successful authentication
    // You can create or update user in your database here
    console.log('Google Profile:', profile);

    // Redirect or send token to the client
    res.redirect('/profile');
  } catch (error) {
    console.error('Google Authentication Error:', error);
    res.redirect('/login');
  }
});

// Define routes for Facebook authentication
app.get('/auth/facebook', (req, res) => {
  const { clientID, redirectURI } = config.facebook;
  const authURL = `https://www.facebook.com/v13.0/dialog/oauth?client_id=${clientID}&redirect_uri=${redirectURI}&scope=email`;
  res.redirect(authURL);
});

app.get('/auth/facebook/callback', async (req, res) => {
  const { clientID, clientSecret, redirectURI } = config.facebook;
  const { code } = req.query;

  try {
    const tokenResponse = await axios.get(`https://graph.facebook.com/v13.0/oauth/access_token?client_id=${clientID}&redirect_uri=${redirectURI}&client_secret=${clientSecret}&code=${code}`);

    const { access_token } = tokenResponse.data;

    const profileResponse = await axios.get(`https://graph.facebook.com/me?fields=name,email&access_token=${access_token}`);
    const profile = profileResponse.data;

    // Handle user data after successful authentication
    // You can create or update user in your database here
    console.log('Facebook Profile:', profile);

    // Redirect or send token to the client
    res.redirect('/profile');
  } catch (error) {
    console.error('Facebook Authentication Error:', error);
    res.redirect('/login');
  }
});

// Protect a route with authentication
app.get('/profile', ensureAuthenticated, (req, res) => {
  res.send('Authenticated User');
});

// Middleware to check if user is authenticated
function ensureAuthenticated(req, res, next) {
  if (req.session.user) {
    return next();
  }
  res.redirect('/login');
}


















<nav class="navbar navbar-expand-lg navbar-dark" style="background-color:  #39A6A3;">


	#pink
		background: linear-gradient(to right, #ff5858, #f857a6)

	#red
		background: linear-gradient(to right, #d31027, #ea384d)

	#purple
		background: linear-gradient(to right, #41295a, #2f0743)

	#blue
		background: linear-gradient(to right, #396afc, #2948ff)

	#green
		background: linear-gradient(to right, #add100, #7b920a)

	#yellow
		background: linear-gradient(to right, #f7971e, #ffd200)

	#orange
		background: linear-gradient(to right, #e43a15, #e65245)
